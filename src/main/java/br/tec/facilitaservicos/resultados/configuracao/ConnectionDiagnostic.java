package br.tec.facilitaservicos.resultados.configuracao;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Component;
import reactor.core.publisher.Mono;
import io.r2dbc.spi.ConnectionFactory;
import io.r2dbc.spi.ConnectionFactoryOptions;
import io.r2dbc.mysql.MySqlConnectionFactoryProvider;

import java.time.Duration;

/**
 * ============================================================================
 * üîç DIAGN√ìSTICO DE CONECTIVIDADE R2DBC
 * ============================================================================
 *
 * Componente para diagnosticar problemas de conectividade com MySQL
 * em ambiente Docker Swarm. Fornece logs detalhados para debug.
 */
@Component
public class ConnectionDiagnostic {
    private static final Logger logger = LoggerFactory.getLogger(ConnectionDiagnostic.class);

    @Value("${spring.r2dbc.url}")
    private String r2dbcUrl;

    @Value("${spring.r2dbc.username}")
    private String username;

    @Value("${spring.r2dbc.password:}")
    private String password;

    @EventListener
    public void onApplicationReady(ApplicationReadyEvent event) {
        logger.info("üîç === DIAGN√ìSTICO DE CONECTIVIDADE R2DBC ===");

        // Log configura√ß√µes (mascarar senha)
        logger.info("üìã Configura√ß√µes de conex√£o:");
        logger.info("   URL: {}", r2dbcUrl);
        logger.info("   Username: {}", username);
        logger.info("   Password: {}", password != null && !password.isEmpty() ? "***configurado***" : "***VAZIO***");

        // Debug dos secrets
        logEnvironmentSecrets(event);

        // Testar conectividade
        testConnection();
    }

    private void logEnvironmentSecrets(ApplicationReadyEvent event) {
        var env = event.getApplicationContext().getEnvironment();

        logger.info("üîç Debug de secrets e propriedades:");

        // Verificar propriedades espec√≠ficas
        String[] propsToCheck = {
            "spring.r2dbc.url",
            "spring.r2dbc.username",
            "spring.r2dbc.password",
            "conexao-de-sorte-database-r2dbc-url",
            "conexao-de-sorte-database-username",
            "conexao-de-sorte-database-password"
        };

        for (String prop : propsToCheck) {
            String value = env.getProperty(prop);
            if (prop.contains("password") && value != null && !value.isEmpty()) {
                logger.info("   {}: ***configurado***", prop);
            } else {
                logger.info("   {}: {}", prop, value != null ? value : "***NULL***");
            }
        }
    }

    private void testConnection() {
        try {
            logger.info("üîå Testando conectividade R2DBC...");

            // Criar ConnectionFactory manualmente para teste
            ConnectionFactoryOptions options = ConnectionFactoryOptions.parse(r2dbcUrl)
                .mutate()
                .option(ConnectionFactoryOptions.USER, username)
                .option(ConnectionFactoryOptions.PASSWORD, password != null ? password : "")
                .build();

            ConnectionFactory factory = new MySqlConnectionFactoryProvider().create(options);

            // Teste de conex√£o com timeout
            Mono.from(factory.create())
                .timeout(Duration.ofSeconds(10))
                .doOnNext(connection -> {
                    logger.info("‚úÖ CONECTIVIDADE OK - Conex√£o estabelecida!");
                    // Fechar conex√£o
                    Mono.from(connection.close()).subscribe();
                })
                .doOnError(error -> {
                    logger.error("‚ùå FALHA NA CONECTIVIDADE:");
                    logger.error("   Tipo: {}", error.getClass().getSimpleName());
                    logger.error("   Mensagem: {}", error.getMessage());

                    // An√°lise detalhada do erro
                    analyzeError(error);
                })
                .subscribe();

        } catch (Exception e) {
            logger.error("üí• ERRO CR√çTICO no diagn√≥stico:", e);
        }
    }

    private void analyzeError(Throwable error) {
        String message = error.getMessage();

        if (message != null) {
            if (message.contains("Connection refused")) {
                logger.error("üö´ AN√ÅLISE: MySQL n√£o est√° acess√≠vel na rede");
                logger.error("   ‚û§ Verificar se MySQL container est√° rodando");
                logger.error("   ‚û§ Verificar rede Docker Swarm 'conexao-network-swarm'");
                logger.error("   ‚û§ Verificar hostname 'conexao-mysql'");
            } else if (message.contains("Access denied")) {
                logger.error("üîê AN√ÅLISE: Credenciais incorretas");
                logger.error("   ‚û§ Verificar secret 'conexao-de-sorte-database-username'");
                logger.error("   ‚û§ Verificar secret 'conexao-de-sorte-database-password'");
            } else if (message.contains("Unknown database")) {
                logger.error("üóÑÔ∏è AN√ÅLISE: Database n√£o existe");
                logger.error("   ‚û§ Database 'conexao_de_sorte' n√£o foi criado");
                logger.error("   ‚û§ Verificar par√¢metro 'createDatabaseIfNotExist=true'");
            } else if (message.contains("timeout")) {
                logger.error("‚è±Ô∏è AN√ÅLISE: Timeout de conex√£o");
                logger.error("   ‚û§ Rede muito lenta ou MySQL sobrecarregado");
            } else {
                logger.error("‚ùì AN√ÅLISE: Erro desconhecido - {}", message);
            }
        }
    }
}