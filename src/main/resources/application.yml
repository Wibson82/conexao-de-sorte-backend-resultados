spring:
  config:
    import: optional:configtree:/run/secrets/
  application:
    name: conexao-resultados
    
  profiles:
    default: prod
  
  main:
    allow-bean-definition-overriding: true
  jackson:
    time-zone: America/Sao_Paulo
    locale: pt_BR
      
  # Azure Key Vault (configuração base)
  cloud:
    azure:
      keyvault:
        secret:
          enabled: ${AZURE_KEYVAULT_ENABLED:false}
  
  # Redis para cache (Resultados usa DB 2)
  data:
    redis:
      host: ${conexao-de-sorte-redis-host:conexao-redis}
      port: ${conexao-de-sorte-redis-port:6379}
      password: ${conexao-de-sorte-redis-password:senha_teste}
      database: ${conexao-de-sorte-redis-database:2}  # Resultados = DB 2
      timeout: 2000ms
      lettuce:
        pool:
          enabled: true
          max-active: 10
          max-idle: 5
          min-idle: 2
          max-wait: 3000ms

  # R2DBC - define defaults seguros para Docker com segredos Azure Key Vault
  r2dbc:
    # Preferencialmente usa -database-r2dbc-url; mantém compat com -database-url
    url: ${conexao-de-sorte-database-r2dbc-url:${conexao-de-sorte-database-url:r2dbc:mysql://mysql-proxy:6033/conexao_sorte_resultados?useSSL=true&allowPublicKeyRetrieval=false}}
    username: ${conexao-de-sorte-database-username:}
    password: ${conexao-de-sorte-database-password:}
    pool:
      enabled: true
      initial-size: 1
      max-size: 15
      max-idle-time: 30m
      max-acquire-time: 15s
      max-create-connection-time: 10s
      max-life-time: 60m
      validation-query: SELECT 1
      
  # Flyway para migrations (usa JDBC)
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true
    
  # Cache reativo (Redis) configurado acima na linha 24
          
  # Security JWT
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: ${conexao-de-sorte-jwt-jwks-uri:https://auth.conexaodesorte.com.br/.well-known/jwks.json}
          issuer-uri: ${conexao-de-sorte-jwt-issuer:https://auth.conexaodesorte.com.br}

server:
  port: ${conexao-de-sorte-server-port:8092}  # Porta específica Resultados
  shutdown: graceful
  
  # SSL/TLS desabilitado - Traefik gerencia terminação SSL
  ssl:
    enabled: false
    
  netty:
    connection-timeout: 20s
    h2c-max-content-length: 0B
    
  error:
    include-message: never
    include-binding-errors: never
    include-stacktrace: never
    include-exception: false

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
      cors:
        allowed-origins: ${conexao-de-sorte-cors-allowed-origins:}
        allowed-methods: GET
        
  endpoint:
    health:
      show-details: when-authorized
      show-components: when-authorized
      probes:
        enabled: true
  
  prometheus:
    metrics:
      export:
        enabled: true
        step: 60s
  metrics:
    distribution:
      percentiles:
        http.server.requests: 0.5,0.95,0.99
  observations:
    http:
      server:
        requests:
          enabled: true
  health:
    redis:
      enabled: true
            
  tracing:
    enabled: ${TRACING_ENABLED:true}
    sampling:
      probability: ${TRACING_PROBABILITY:0.1}

# Paginação e Performance
pagination:
  default-size: 20
  max-size: 100
  default-sort: dataResultado,desc
  
# Cache Configuration
cache:
  resultados:
    ttl: 300  # 5 minutos
  ranking:
    ttl: 900  # 15 minutos
  estatisticas:
    ttl: 1800  # 30 minutos

# CORS Configuration - segredos Azure Key Vault
cors:
  # Origens permitidas para requisições. Utilize "*" apenas em desenvolvimento.
  allowed-origins: ${conexao-de-sorte-cors-allowed-origins:}
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: Authorization,Content-Type
  allow-credentials: ${conexao-de-sorte-cors-allow-credentials:false}
  max-age: 3600

# Rate Limiting
rate-limit:
  enabled: true
  default-requests-per-minute: 120
  endpoints:
    "/rest/v1/resultados":
      requests-per-minute: 60
      burst-capacity: 100
    "/rest/v1/resultados/ranking":
      requests-per-minute: 30
      burst-capacity: 50
    "/rest/v1/resultados/estatisticas":
      requests-per-minute: 20
      burst-capacity: 30

# Security Headers
security:
  headers:
    content-security-policy: "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self'"
    x-content-type-options: nosniff
    x-frame-options: DENY
    x-xss-protection: "1; mode=block"
    strict-transport-security: "max-age=31536000; includeSubDomains"

# Feature Flags
features:
  resultados-microservice: ${FEATURE_RESULTADOS_MS:false}
  advanced-ranking: ${FEATURE_ADVANCED_RANKING:true}
  statistics-cache: ${FEATURE_STATS_CACHE:true}
  audit-logging: ${FEATURE_AUDIT_LOGGING:true}
  metrics-collection: ${FEATURE_METRICS:true}

# Logging Configuration
logging:
  level:
    br.tec.facilitaservicos.resultados: ${LOG_LEVEL:INFO}
    org.springframework.security: ${SECURITY_LOG_LEVEL:WARN}
    org.springframework.r2dbc: ${R2DBC_LOG_LEVEL:WARN}
    io.r2dbc.mysql: ${MYSQL_LOG_LEVEL:WARN}
    
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
    
  file:
    name: ${LOG_FILE:logs/resultados.log}

# OpenAPI Documentation
springdoc:
  api-docs:
    enabled: true
    path: /v3/api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
  show-actuator: false
  
# Resilience4j Configuration
resilience4j:
  ratelimiter:
    instances:
      resultados-service:
        limit-for-period: 60
        limit-refresh-period: 1m
        timeout-duration: 3s
        
  circuitbreaker:
    instances:
      database:
        sliding-window-size: 100
        minimum-number-of-calls: 10
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 5

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod
      
  r2dbc:
    url: ${conexao-de-sorte-database-url:r2dbc:mysql://mysql-proxy:6033/conexao_sorte_resultados?useSSL=true&allowPublicKeyRetrieval=false}
    username: ${conexao-de-sorte-database-username:}
    password: ${conexao-de-sorte-redis-password:senha_teste}
    pool:
      initial-size: 20
      max-size: 100
      
  flyway:
    url: ${conexao-de-sorte-database-jdbc-url:jdbc:mysql://mysql-proxy:6033/conexao_sorte_resultados?useSSL=true&allowPublicKeyRetrieval=false}
    user: ${conexao-de-sorte-database-username:}
    password: ${conexao-de-sorte-redis-password:senha_teste}
    
server:
  port: 8083
  ssl:
    enabled: false
    
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: never
      
logging:
  level:
    br.tec.facilitaservicos.resultados: INFO
    root: WARN
    
  file:
    name: ${LOG_FILE:/app/logs/application.log}
    
features:
  resultados-microservice: true
  advanced-ranking: true
  statistics-cache: true
  audit-logging: true
  metrics-collection: true
  
rate-limit:
  default-requests-per-minute: 60
  endpoints:
    "/rest/v1/resultados":
      requests-per-minute: 30
