# =============================================================================
# CONFIGURAÇÃO AZURE KEY VAULT - RESULTADOS MICROSERVICE
# =============================================================================
# ✅ Configuração específica para o microserviço de resultados
# ✅ Usa Spring Cloud Azure para integração com Azure Key Vault
# ✅ Compatível com deployment via Docker
# =============================================================================

spring:
  config:
    activate:
      on-profile: azure
    import:
      - "optional:classpath:application-prod.yml"

  # ===== SPRING CLOUD AZURE =====
  cloud:
    azure:
      profile:
        tenant-id: ${AZURE_TENANT_ID:}
      credential:
        client-id: ${AZURE_CLIENT_ID:}
        managed-identity-enabled: false

      # Azure Key Vault Secrets
      keyvault:
        secret:
          enabled: true
          endpoint: ${AZURE_KEYVAULT_ENDPOINT:}
          property-sources:
            - endpoint: ${AZURE_KEYVAULT_ENDPOINT:}
              name: resultados-microservice-secrets
              case-sensitive: false

  # ===== DATABASE CONFIGURATION =====
  # Primary: Azure Key Vault secrets
  # Fallback: Environment variables from container
  datasource:
    url: ${conexao-de-sorte-database-url:jdbc:mysql://conexao-mysql:3306/conexao_de_sorte?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=America/Sao_Paulo}
    username: ${conexao-de-sorte-database-username:${DATABASE_USERNAME:resultados_user}}
    password: ${conexao-de-sorte-database-password:${DATABASE_PASSWORD:}}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000

  # ===== JPA CONFIGURATION =====
  jpa:
    hibernate:
      ddl-auto: validate
    database-platform: org.hibernate.dialect.MySQL8Dialect
    show-sql: false

# ===== MICROSERVICE SPECIFIC CONFIG =====
app:
  microservice:
    name: resultados
    version: @project.version@
    description: "Microserviço de gerenciamento de resultados de loteria"
  
  # JWT Configuration from Azure Key Vault
  jwt:
    # Fallback para GitHub Secrets se Azure Key Vault não disponível
    signing-key: ${conexao-de-sorte-jwt-signing-key:${JWT_SIGNING_KEY:}}
    verification-key: ${conexao-de-sorte-jwt-verification-key:${JWT_VERIFICATION_KEY:}}
    issuer: ${conexao-de-sorte-jwt-issuer:https://resultados.conexaodesorte.com.br}
    audience: ${conexao-de-sorte-jwt-audience:conexao-de-sorte-resultados}
    expiration: ${conexao-de-sorte-jwt-expiration:86400}

  # Redis Configuration from Azure Key Vault
  redis:
    url: ${conexao-de-sorte-redis-url:redis://redis:6379}
    password: ${conexao-de-sorte-redis-password:${REDIS_PASSWORD:}}
    timeout: 2000ms
    
  # Cache Configuration
  cache:
    enabled: true
    ttl:
      resultados: PT5M
      ranking: PT1H
      estatisticas: PT10M

  # Rate Limiting
  rate-limit:
    requests-per-minute: 100
    burst-capacity: 50

# ===== AZURE LOGGING =====
logging:
  level:
    '[com.azure]': INFO
    '[com.azure.security.keyvault]': INFO
    '[org.springframework.cloud.azure]': INFO
    '[br.tec.facilitaservicos.resultados]': INFO

# ===== MANAGEMENT ENDPOINTS =====
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when_authorized
      show-components: always
  health:
    azure-keyvault:
      enabled: true
    db:
      enabled: true
    redis:
      enabled: true

# ===== AZURE CUSTOM PROPERTIES =====
azure:
  keyvault:
    enabled: ${AZURE_KEYVAULT_ENABLED:true}
    endpoint: ${AZURE_KEYVAULT_ENDPOINT:}
    fallback:
      enabled: true # Permite fallback para variáveis de ambiente
      local-properties: true

# ===== SERVER CONFIGURATION =====
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /api/v1
  compression:
    enabled: true
  http2:
    enabled: true