name: üéØ Resultados Microservice - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: ['src/**', 'pom.xml', 'Dockerfile', '.github/workflows/**']
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: false
        default: 'auto'
        type: choice
        options:
        - auto
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: conexao-de-sorte/resultados-microservice
  SERVICE_NAME: resultados

jobs:
  # ===== BUILD & TEST =====
  build-and-test:
    runs-on: ubuntu-latest
    name: üèóÔ∏è Build and Test
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        
      - name: üõ°Ô∏è Dependency review (GitHub Advisory Database)
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fail-on-severity: high
          allow-licenses: Apache-2.0, MIT, BSD-3-Clause, BSD-2-Clause
        
      - name: ‚òï Setup Java 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'
          cache: maven
          
      - name: üîç Verify Maven wrapper
        run: |
          chmod +x ./mvnw
          ./mvnw --version
          
      - name: üß™ Run unit tests
        run: ./mvnw clean test -Dspring.profiles.active=test
        
      - name: üèóÔ∏è Build application
        run: ./mvnw clean package -DskipTests -Dspring.profiles.active=production
        
      - name: üì¶ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: resultados-microservice-jar
          path: target/*.jar
          retention-days: 7

  # ===== SECURITY SCAN =====
  security-scan:
    runs-on: ubuntu-latest
    name: üõ°Ô∏è Security Scanning
    needs: build-and-test
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        
      - name: ‚òï Setup Java 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'
          cache: maven
          
      - name: üîç OWASP Dependency Check (com timeout - fallback)
        uses: ./.github/actions/timeout-run
        with:
          command: |
            ./mvnw org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=7
          timeout-seconds: '120'
        continue-on-error: true
        
      - name: üîç Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: üì§ Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ===== BUILD & PUSH IMAGE =====
  build-image:
    runs-on: ubuntu-latest
    name: üê≥ Build Docker Image
    needs: [build-and-test, security-scan]
    permissions:
      contents: read
      packages: write
      
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        
      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: üîê Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: üìã Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Resultados Microservice
            org.opencontainers.image.description=Lottery results management microservice
            org.opencontainers.image.service=${{ env.SERVICE_NAME }}
            
      - name: üèóÔ∏è Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SERVICE_NAME=${{ env.SERVICE_NAME }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            
      - name: üîç Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          
      - name: üì§ Upload image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

  # ===== DEPLOY TO STAGING =====
  deploy-staging:
    runs-on: ubuntu-latest
    name: üöÄ Deploy to Staging
    needs: build-image
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: üöÄ Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: 22
          script: |
            cd /opt/conexao-microservices
            echo "Deploying resultados microservice to staging..."
            
            # Pull latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop
            
            # Update service
            docker compose -f docker-compose.staging.yml up -d resultados-microservice
            
            # Health check
            sleep 30
            curl -f http://localhost:8080/actuator/health || exit 1
            
            # Cleanup old images
            docker image prune -f

  # ===== DEPLOY TO PRODUCTION =====
  deploy-production:
    runs-on: ubuntu-latest
    name: üåü Deploy to Production
    needs: build-image
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: https://resultados.conexaodesorte.com.br
    
    steps:
      - name: üåü Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: 22
          script: |
            cd /opt/conexao-microservices
            echo "Deploying resultados microservice to production..."
            
            # Create backup of current version
            docker tag resultados-microservice:current resultados-microservice:backup-$(date +%Y%m%d-%H%M%S) || true
            
            # Pull latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Update service with zero-downtime
            docker compose -f docker-compose.yml up -d resultados-microservice --wait
            
            # Health check with retry
            for i in {1..10}; do
              if curl -f https://resultados.conexaodesorte.com.br/actuator/health; then
                echo "Health check passed"
                break
              fi
              echo "Health check failed, retrying in 10s..."
              sleep 10
              if [ $i -eq 10 ]; then
                echo "Health check failed after 10 retries, rolling back..."
                docker compose -f docker-compose.yml up -d resultados-microservice:backup-$(date +%Y%m%d) || true
                exit 1
              fi
            done
            
            # Cleanup old images
            docker image prune -f
            
            echo "‚úÖ Resultados microservice deployed successfully to production!"

  # ===== NOTIFICATION =====
  notify:
    runs-on: ubuntu-latest
    name: üì¢ Notification
    if: always()
    needs: [build-and-test, security-scan, build-image, deploy-staging, deploy-production]
    
    steps:
      - name: üì¢ Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always() && vars.SLACK_WEBHOOK_URL != ''
        with:
          status: ${{ job.status }}
          channel: '#ci-cd-notifications'
          webhook_url: ${{ vars.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              username: 'GitHub Actions',
              icon_emoji: ':dart:',
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                fields: [{
                  title: 'üéØ Resultados Microservice',
                  value: `Status: ${{ job.status }}\nBranch: ${process.env.AS_REF}\nCommit: ${process.env.AS_COMMIT}`,
                  short: true
                }]
              }]
            }
