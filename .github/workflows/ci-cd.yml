name: "🎯 Resultados Backend - CI/CD Pipeline (Self-hosted Deploy)"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SERVICE_NAME: resultados
  STACK_NAME: conexao-resultados
  DOCKER_NETWORK_NAME: conexao-network-swarm

permissions:
  id-token: write
  contents: read

jobs:
  validate-and-build:
    runs-on: ubuntu-latest
    timeout-minutes: 12
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4.3.0
        with:
          fetch-depth: 1

      - name: Validate Docker Compose
        run: |
          docker compose -f docker-compose.yml config -q
          echo "✅ docker-compose.yml válido"

      - name: Security Validation
        run: |
          echo "🔍 Verificando senha hardcoded em docker-compose.yml..."
          if grep -nE "password\s*:\s*[^[:space:]]+" docker-compose.yml | grep -v "\${" | grep -v "#" | grep -v "external"; then
            echo "❌ Encontrada senha potencialmente hardcoded"
            exit 1
          fi
          echo "✅ Sem senhas hardcoded detectadas"

      - name: "🔎 Validar configuração básica"
        run: |
          echo "✅ Validação básica concluída"

      - name: Validation completed
        run: echo "✅ Validação concluída - pipeline liberado para deploy"

  build-and-push:
    needs: validate-and-build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4.3.0

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/wibson82/conexao-de-sorte-backend-resultados:latest

  deploy-selfhosted:
    needs: [validate-and-build, build-and-push]
    runs-on: [self-hosted, Linux, X64, conexao-de-sorte-backend-resultados]
    timeout-minutes: 20
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4.3.0
        with:
          clean: true
          fetch-depth: 1

      - name: "🔐 Azure Login (OIDC)"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: "✅ Validar sessão Azure"
        run: |
          echo "🔍 Validando sessão Azure..."
          az account show >/dev/null 2>&1 || { echo "❌ Falha na autenticação Azure"; exit 1; }
          echo "✅ Azure autenticado (subscription $(az account show --query id -o tsv))"

      - name: "🔑 Get secrets from Azure Key Vault (via AZ CLI)"
        run: |
          echo "🔑 Obtendo secrets do projeto Resultados do Azure Key Vault..."

          # Secrets essenciais para o projeto Resultados (R2DBC ONLY)
          # Obter URL R2DBC do banco e corrigir hostname para Docker Swarm
          DATABASE_R2DBC_BASE=$(az keyvault secret show --name conexao-de-sorte-database-r2dbc-url --vault-name kv-conexao-de-sorte --query value -o tsv)

          # Corrigir hostname para usar o service name correto do MySQL no Docker Swarm
          DATABASE_R2DBC_CORRECTED=$(echo "$DATABASE_R2DBC_BASE" | sed 's|conexao-mysql:3306|conexao-mysql_mysql:3306|g')

          echo "DATABASE_R2DBC_URL=$DATABASE_R2DBC_CORRECTED" >> $GITHUB_ENV
          echo "DATABASE_USERNAME=$(az keyvault secret show --name conexao-de-sorte-database-username --vault-name kv-conexao-de-sorte --query value -o tsv)" >> $GITHUB_ENV
          echo "DATABASE_PASSWORD=$(az keyvault secret show --name conexao-de-sorte-database-password --vault-name kv-conexao-de-sorte --query value -o tsv)" >> $GITHUB_ENV
          echo "REDIS_HOST=$(az keyvault secret show --name conexao-de-sorte-redis-host --vault-name kv-conexao-de-sorte --query value -o tsv)" >> $GITHUB_ENV
          echo "REDIS_PORT=$(az keyvault secret show --name conexao-de-sorte-redis-port --vault-name kv-conexao-de-sorte --query value -o tsv)" >> $GITHUB_ENV
          echo "REDIS_PASSWORD=$(az keyvault secret show --name conexao-de-sorte-redis-password --vault-name kv-conexao-de-sorte --query value -o tsv)" >> $GITHUB_ENV
          echo "REDIS_DATABASE=$(az keyvault secret show --name conexao-de-sorte-redis-database --vault-name kv-conexao-de-sorte --query value -o tsv)" >> $GITHUB_ENV
          echo "JWT_SECRET=$(az keyvault secret show --name conexao-de-sorte-jwt-secret --vault-name kv-conexao-de-sorte --query value -o tsv)" >> $GITHUB_ENV

          echo "✅ Secrets do projeto Resultados obtidos do Azure Key Vault"

      - name: "🔒 Provide Docker Secrets from Azure Key Vault"
        run: |
          echo "🔒 Fornecendo secrets do Azure Key Vault para Docker Swarm..."

          # Funcao para fornecer secret do Azure Key Vault para Docker Swarm
          provide_secret_safe() {
            local secret_name="$1"
            local secret_value="$2"

            echo "Fornecendo secret: $secret_name"

            # Verificar se secret existe e remover se necessário
            if docker secret ls --format "{{.Name}}" | grep -q "^${secret_name}$"; then
              echo "Secret $secret_name já existe - removendo..."
              if ! docker secret rm "$secret_name" 2>/dev/null; then
                echo "⚠️ Secret $secret_name está em uso - será atualizado após restart do serviço"
                return 0
              fi
              sleep 1
            fi

            # Fornecer secret do Azure Key Vault para Docker Swarm
            if echo "$secret_value" | docker secret create "$secret_name" - >/dev/null 2>&1; then
              echo "✅ Secret $secret_name fornecido do Azure Key Vault para Swarm"
            else
              echo "❌ Falha ao fornecer secret $secret_name"
              return 1
            fi
          }

          # Fornecer os secrets essenciais do Azure Key Vault para Docker Swarm (R2DBC ONLY)
          provide_secret_safe "conexao-de-sorte-database-r2dbc-url" "$DATABASE_R2DBC_URL"
          provide_secret_safe "conexao-de-sorte-database-username" "$DATABASE_USERNAME"
          provide_secret_safe "conexao-de-sorte-database-password" "$DATABASE_PASSWORD"
          provide_secret_safe "conexao-de-sorte-redis-host" "$REDIS_HOST"
          provide_secret_safe "conexao-de-sorte-redis-port" "$REDIS_PORT"
          provide_secret_safe "conexao-de-sorte-redis-password" "$REDIS_PASSWORD"
          provide_secret_safe "conexao-de-sorte-redis-database" "$REDIS_DATABASE"
          provide_secret_safe "conexao-de-sorte-jwt-secret" "$JWT_SECRET"

          echo "🔐 Secrets do Azure Key Vault fornecidos para Docker Swarm"

      - name: 🧹 Preparar ambiente local
        run: |
          echo "📁 Verificando arquivos para deploy..."
          [[ -f docker-compose.yml ]] || { echo "❌ docker-compose.yml não encontrado"; exit 1; }
          mkdir -p logs
          echo "🔧 Garantindo rede compartilhada ${DOCKER_NETWORK_NAME}"
          if ! docker network ls --filter name="^${DOCKER_NETWORK_NAME}$" --format '{{.Name}}' | grep -q "${DOCKER_NETWORK_NAME}"; then
            docker network create --driver overlay --attachable "${DOCKER_NETWORK_NAME}"
          fi

      - name: 🐳 Deploy Docker Stack
        run: |
          set -Eeuo pipefail
          echo "🚀 Deploy da stack ${STACK_NAME}"
          docker stack deploy -c docker-compose.yml "${STACK_NAME}"
          echo "✅ Stack enviada"

      - name: 🏥 Health Check Melhorado
        run: |
          echo "⏳ Aguardando serviço ficar saudável"
          STACK_NAME="${STACK_NAME:-conexao-resultados}"
          SERVICE_NAME="${STACK_NAME}_conexao-de-sorte-backend-resultados"

          # Aguardar serviço ser criado
          echo "🔍 Verificando se serviço foi criado..."
          for attempt in {1..10}; do
            if docker service ls --filter name="$SERVICE_NAME" --format "{{.Name}}" | grep -q .; then
              echo "✅ Serviço $SERVICE_NAME encontrado"
              break
            fi
            echo "⏳ Tentativa $attempt/10 - aguardando criação do serviço..."
            sleep 5
          done

          # Verificar se containers estão rodando
          echo "🔍 Verificando containers do serviço..."
          docker service ps "$SERVICE_NAME" --no-trunc

          # Aguardar containers estarem rodando
          echo "⏳ Aguardando containers ficarem operacionais..."
          sleep 60

          # Verificar logs para debug
          echo "🔍 Verificando logs do serviço:"
          docker service logs "$SERVICE_NAME" --tail 20 || true

          # Health check melhorado
          echo "🏥 Executando health check..."
          attempts=0
          max_attempts=20

          until curl -fsS http://localhost:8087/actuator/health >/dev/null 2>&1; do
            attempts=$((attempts+1))
            if [ $attempts -ge $max_attempts ]; then
              echo "❌ Serviço não ficou saudável após $max_attempts tentativas"

              echo "🔍 Logs finais do container:"
              docker service logs "$SERVICE_NAME" --tail 50

              echo "📊 Status dos serviços:"
              docker service ls --filter name="${STACK_NAME}_"

              echo "🐳 Status dos containers:"
              docker ps --filter name="${STACK_NAME}"

              echo "🔐 Secrets disponíveis:"
              docker secret ls | grep conexao-de-sorte

              exit 1
            fi
            echo "⏳ Health check tentativa $attempts/$max_attempts..."
            sleep 15
          done

          echo "✅ Health check OK - serviço está saudável!"

          # Teste final de conectividade
          echo "🧪 Teste final de conectividade:"
          curl -s http://localhost:8087/actuator/health | head -3

  summary:
    needs: deploy-selfhosted
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: 📊 Resumo
        run: |
          echo "## 🎯 Deploy resultados" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.deploy-selfhosted.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Serviço: ${SERVICE_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "- Stack: ${STACK_NAME}" >> $GITHUB_STEP_SUMMARY
