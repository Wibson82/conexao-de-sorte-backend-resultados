name: 🎯 Resultados Microservice - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: ['src/**', 'pom.xml', 'Dockerfile', '.github/workflows/**']
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SERVICE_NAME: resultados

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.environment || 'auto' }}
  cancel-in-progress: false

jobs:
  # ===== BUILD & TEST =====
  build-and-test:
    runs-on: ubuntu-latest
    name: 🏗️ Build and Test
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: ☕ Setup Java 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'
          cache: maven

      - name: 🔍 Verify Maven wrapper
        run: |
          chmod +x ./mvnw
          ./mvnw --version

      - name: 🧪 Run unit tests
        run: ./mvnw clean test -Dspring.profiles.active=test

      - name: 🏗️ Build application
        run: ./mvnw clean package -DskipTests -Dspring.profiles.active=production

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: resultados-microservice-jar
          path: target/*.jar
          retention-days: 7

  # ===== BUILD & PUSH IMAGE =====
  build-image:
    runs-on: ubuntu-latest
    name: 🐳 Build Docker Image
    needs: build-and-test
    permissions:
      id-token: write
      contents: read
      packages: write
      attestations: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
      image-name-lower: ${{ steps.image_name.outputs.image_name_lower }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Compute lowercase image name
        id: image_name
        run: |
          set -euo pipefail
          REPO='${{ env.IMAGE_NAME }}'
          IMG_LOWER=$(echo "$REPO" | tr '[:upper:]' '[:lower:]')
          echo "image_name_lower=$IMG_LOWER" >> "$GITHUB_OUTPUT"

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.image_name.outputs.image_name_lower }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-,format=short
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{branch}}-{{date 'YYYYMMDD-HHmmss'}}
            type=raw,value=prod-latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=teste-latest,enable=${{ github.ref == 'refs/heads/develop' }}
          labels: |
            org.opencontainers.image.title=Resultados Microservice
            org.opencontainers.image.description=Lottery results management microservice
            org.opencontainers.image.service=${{ env.SERVICE_NAME }}

      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          sbom: true
          provenance: mode=max
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SERVICE_NAME=${{ env.SERVICE_NAME }}
            BUILD_DATE=${{ github.event.head_commit.timestamp || github.run_id }}
            VCS_REF=${{ github.sha }}
            VERSION=1.0.0

  # ===== SIGN IMAGE WITH COSIGN (keyless) =====
  sign-image:
    runs-on: ubuntu-latest
    name: ✍️ Sign Container Image
    needs: build-image
    permissions:
      id-token: write
      packages: write
      contents: read

    steps:
      - name: 🔐 Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📌 Resolve image tag to sign
        id: resolve_tag
        run: |
          set -euo pipefail
          tags="${{ needs.build-image.outputs.image-tags }}"
          first=$(echo "$tags" | tr ',' '\n' | sed '/^\s*$/d' | head -n1 | tr -d '[:space:]')
          if [ -z "$first" ]; then
            echo "No image tag found from build metadata. Exiting." >&2
            exit 1
          fi
          if [[ "$first" != *"/"*":"* && "$first" != *"${{ env.REGISTRY }}"* ]]; then
            PREFIX="${{ env.REGISTRY }}/${{ needs.build-image.outputs.image-name-lower }}"
            IMAGE="$PREFIX:$first"
          else
            IMAGE="$first"
          fi
          IMAGE=$(echo "$IMAGE" | tr '[:upper:]' '[:lower:]')
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

      - name: 🔎 Validate image exists (pull)
        run: |
          set -euo pipefail
          IMAGE="${{ steps.resolve_tag.outputs.image }}"
          echo "Pulling image: $IMAGE"
          docker pull "$IMAGE"

      - name: 🔐 Install Cosign (if missing)
        run: |
          set -euo pipefail
          if ! command -v cosign >/dev/null 2>&1; then
            curl -sSfL https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 -o /usr/local/bin/cosign
            chmod +x /usr/local/bin/cosign
          fi

      - name: ✍️ Sign image with Cosign (keyless)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          set -euo pipefail
          IMAGE="${{ steps.resolve_tag.outputs.image }}"
          cosign sign --yes "$IMAGE"
          echo "Signed: $IMAGE"

      - name: ✅ Verify cosign signature
        run: |
          set -euo pipefail
          IMAGE="${{ steps.resolve_tag.outputs.image }}"
          cosign verify "$IMAGE" || (echo "cosign verify failed" >&2; exit 1)

  # ===== DEPLOY TO STAGING (SELF-HOSTED + OIDC) =====
  deploy-staging:
    needs: [build-image, sign-image]
    runs-on: [self-hosted, hostinger-runner]
    if: github.ref == 'refs/heads/develop'
    name: 🚀 Deploy to Staging (Self-hosted)
    permissions:
      id-token: write
      contents: read
      packages: read

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔐 Azure Login (OIDC / SP fallback)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 🔐 Fetch Key Vault secrets (local on runner)
        id: fetch_secrets
        run: |
          set -euo pipefail
          # resolve vault name
          if [ -n "${{ secrets.AZURE_KEYVAULT_ENDPOINT }}" ]; then
            VAULT=$(echo "${{ secrets.AZURE_KEYVAULT_ENDPOINT }}" | sed 's|https://||' | sed 's|\.vault\.azure\.net/||')
          else
            VAULT="${{ secrets.AZURE_KEYVAULT_NAME }}"
          fi
          echo "VAULT_NAME=$VAULT" >> $GITHUB_ENV

          # required secrets in your vault (exact names you provided)
          REQUIRED_SECRETS=(
            "conexao-de-sorte-database-password"
            "conexao-de-sorte-database-url"
            "conexao-de-sorte-database-username"
            "conexao-de-sorte-encryption-master-key"
            "conexao-de-sorte-encryption-master-password"
            "conexao-de-sorte-jwt-key-id"
            "conexao-de-sorte-jwt-privateKey"
            "conexao-de-sorte-jwt-publicKey"
            "conexao-de-sorte-jwt-secret"
          )

          for s in "${REQUIRED_SECRETS[@]}"; do
            if ! az keyvault secret show --vault-name "$VAULT" --name "$s" --query id -o tsv >/dev/null 2>&1; then
              echo "ERROR: Secret '$s' not found in vault '$VAULT'." >&2
              exit 1
            fi
          done

          # read values (do not print)
          DB_PASS=$(az keyvault secret show --vault-name "$VAULT" --name "conexao-de-sorte-database-password" --query value -o tsv)
          DB_URL=$(az keyvault secret show --vault-name "$VAULT" --name "conexao-de-sorte-database-url" --query value -o tsv)
          DB_USER=$(az keyvault secret show --vault-name "$VAULT" --name "conexao-de-sorte-database-username" --query value -o tsv)
          ENC_KEY=$(az keyvault secret show --vault-name "$VAULT" --name "conexao-de-sorte-encryption-master-key" --query value -o tsv)
          ENC_PASS=$(az keyvault secret show --vault-name "$VAULT" --name "conexao-de-sorte-encryption-master-password" --query value -o tsv)
          JWT_KEY_ID=$(az keyvault secret show --vault-name "$VAULT" --name "conexao-de-sorte-jwt-key-id" --query value -o tsv)
          JWT_SECRET=$(az keyvault secret show --vault-name "$VAULT" --name "conexao-de-sorte-jwt-secret" --query value -o tsv)
          JWT_PRIV=$(az keyvault secret show --vault-name "$VAULT" --name "conexao-de-sorte-jwt-privateKey" --query value -o tsv)
          JWT_PUB=$(az keyvault secret show --vault-name "$VAULT" --name "conexao-de-sorte-jwt-publicKey" --query value -o tsv)

          # export env for next steps (avoid printing values)
          echo "SPRING_DATASOURCE_URL=$DB_URL" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_USERNAME=$DB_USER" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_PASSWORD=$DB_PASS" >> $GITHUB_ENV
          echo "CONEXAO_JWT_SECRET=$JWT_SECRET" >> $GITHUB_ENV
          echo "CONEXAO_JWT_KEY_ID=$JWT_KEY_ID" >> $GITHUB_ENV

          # write large keys to temp dir and expose path via GITHUB_ENV
          SECRETS_DIR=$(mktemp -d -p /tmp conexao_secrets_XXXX)
          umask 077
          printf '%s' "$JWT_PRIV" > "$SECRETS_DIR/jwt_private.pem"
          printf '%s' "$JWT_PUB"  > "$SECRETS_DIR/jwt_public.pem"
          printf '%s' "$ENC_KEY" > "$SECRETS_DIR/encryption_master_key"
          printf '%s' "$ENC_PASS" > "$SECRETS_DIR/encryption_master_password"
          chmod 600 "$SECRETS_DIR"/*
          echo "SECRETS_DIR=$SECRETS_DIR" >> $GITHUB_ENV

      - name: 🔐 Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚚 Pull & run container (staging)
        run: |
          set -euo pipefail
          TAG=develop
          IMAGE=${{ env.REGISTRY }}/${{ needs.build-image.outputs.image-name-lower }}:$TAG

          docker pull "$IMAGE"
          docker stop resultados-microservice || true
          docker rm resultados-microservice || true

          docker run -d \
            --name resultados-microservice \
            --network conexao-network \
            --restart unless-stopped \
            -p 8080:8080 \
            --health-cmd="curl -f http://localhost:8080/actuator/health || exit 1" \
            --health-interval=60s \
            --health-timeout=30s \
            --health-retries=3 \
            --health-start-period=120s \
            -v "${SECRETS_DIR}":/run/secrets:ro \
            -e SPRING_PROFILES_ACTIVE=staging,azure \
            -e ENVIRONMENT=staging \
            -e SERVER_PORT=8080 \
            -e SPRING_CONFIG_IMPORT=optional:configtree:/run/secrets/ \
            -e TZ=America/Sao_Paulo \
            -e SPRING_DATASOURCE_URL="${SPRING_DATASOURCE_URL}" \
            -e SPRING_DATASOURCE_USERNAME="${SPRING_DATASOURCE_USERNAME}" \
            -e SPRING_DATASOURCE_PASSWORD="${SPRING_DATASOURCE_PASSWORD}" \
            -e JWT_SECRET="${CONEXAO_JWT_SECRET}" \
            -e JWT_PRIVATE_PATH="/run/secrets/jwt_private.pem" \
            -e JWT_PUBLIC_PATH="/run/secrets/jwt_public.pem" \
            -e ENC_MASTER_KEY_PATH="/run/secrets/encryption_master_key" \
            -e ENC_MASTER_PASSWORD_PATH="/run/secrets/encryption_master_password" \
            "$IMAGE"

          for i in $(seq 1 10); do
            if curl -fsS http://localhost:8080/actuator/health >/dev/null 2>&1; then
              echo "✅ Service healthy"
              break
            fi
            echo "⏳ waiting for health ($i/10)..."
            sleep 10
            if [ "$i" -eq 10 ]; then
              echo "❌ Health check failed"
              docker logs resultados-microservice --tail 100
              rm -rf "${SECRETS_DIR}" || true
              exit 1
            fi
          done

          # cleanup temporary secrets dir
          rm -rf "${SECRETS_DIR}" || true
          docker image prune -f

  # ===== DEPLOY TO PRODUCTION (SELF-HOSTED + OIDC) =====
  deploy-production:
    needs: [build-image, sign-image]
    runs-on: [self-hosted, hostinger-runner]
    if: github.ref == 'refs/heads/main'
    name: 🌟 Deploy to Production (Self-hosted)
    permissions:
      id-token: write
      contents: read
      packages: read

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔐 Azure Login (OIDC / SP fallback)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 🔐 Fetch Key Vault secrets (local on runner)
        id: fetch_secrets_prod
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.AZURE_KEYVAULT_ENDPOINT }}" ]; then
            VAULT=$(echo "${{ secrets.AZURE_KEYVAULT_ENDPOINT }}" | sed 's|https://||' | sed 's|\.vault\.azure\.net/||')
          else
            VAULT="${{ secrets.AZURE_KEYVAULT_NAME }}"
          fi
          echo "VAULT_NAME=$VAULT" >> $GITHUB_ENV

          # same required secrets as staging
          REQUIRED_SECRETS=(
            "conexao-de-sorte-database-password"
            "conexao-de-sorte-database-url"
            "conexao-de-sorte-database-username"
            "conexao-de-sorte-encryption-master-key"
            "conexao-de-sorte-encryption-master-password"
            "conexao-de-sorte-jwt-key-id"
            "conexao-de-sorte-jwt-privateKey"
            "conexao-de-sorte-jwt-publicKey"
            "conexao-de-sorte-jwt-secret"
          )

          for s in "${REQUIRED_SECRETS[@]}"; do
            if ! az keyvault secret show --vault-name "$VAULT" --name "$s" --query id -o tsv >/dev/null 2>&1; then
              echo "ERROR: Secret '$s' not found in vault '$VAULT'." >&2
              exit 1
            fi
          done

          DB_PASS=$(az keyvault secret show --vault-name "$VAULT" --name "conexao-de-sorte-database-password" --query value -o tsv)
          DB_URL=$(az keyvault secret show --vault-name "$VAULT" --name "conexao-de-sorte-database-url" --query value -o tsv)
          DB_USER=$(az keyvault secret show --vault-name "$VAULT" --name "conexao-de-sorte-database-username" --query value -o tsv)
          ENC_KEY=$(az keyvault secret show --vault-name "$VAULT" --name "conexao-de-sorte-encryption-master-key" --query value -o tsv)
          ENC_PASS=$(az keyvault secret show --vault-name "$VAULT" --name "conexao-de-sorte-encryption-master-password" --query value -o tsv)
          JWT_KEY_ID=$(az keyvault secret show --vault-name "$VAULT" --name "conexao-de-sorte-jwt-key-id" --query value -o tsv)
          JWT_SECRET=$(az keyvault secret show --vault-name "$VAULT" --name "conexao-de-sorte-jwt-secret" --query value -o tsv)
          JWT_PRIV=$(az keyvault secret show --vault-name "$VAULT" --name "conexao-de-sorte-jwt-privateKey" --query value -o tsv)
          JWT_PUB=$(az keyvault secret show --vault-name "$VAULT" --name "conexao-de-sorte-jwt-publicKey" --query value -o tsv)

          echo "SPRING_DATASOURCE_URL=$DB_URL" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_USERNAME=$DB_USER" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_PASSWORD=$DB_PASS" >> $GITHUB_ENV
          echo "CONEXAO_JWT_SECRET=$JWT_SECRET" >> $GITHUB_ENV
          echo "CONEXAO_JWT_KEY_ID=$JWT_KEY_ID" >> $GITHUB_ENV

          SECRETS_DIR=$(mktemp -d -p /tmp conexao_secrets_XXXX)
          umask 077
          printf '%s' "$JWT_PRIV" > "$SECRETS_DIR/jwt_private.pem"
          printf '%s' "$JWT_PUB"  > "$SECRETS_DIR/jwt_public.pem"
          printf '%s' "$ENC_KEY" > "$SECRETS_DIR/encryption_master_key"
          printf '%s' "$ENC_PASS" > "$SECRETS_DIR/encryption_master_password"
          chmod 600 "$SECRETS_DIR"/*
          echo "SECRETS_DIR=$SECRETS_DIR" >> $GITHUB_ENV

      - name: 🔐 Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚚 Pull & run container (production)
        run: |
          set -euo pipefail
          TAG=latest
          IMAGE=${{ env.REGISTRY }}/${{ needs.build-image.outputs.image-name-lower }}:$TAG

          docker tag resultados-microservice resultados-microservice:backup-$(date +%Y%m%d-%H%M%S) || true
          docker pull "$IMAGE"
          docker stop resultados-microservice || true
          docker rm resultados-microservice || true

          docker run -d \
            --name resultados-microservice \
            --network conexao-network \
            --restart unless-stopped \
            -p 8080:8080 \
            --health-cmd="curl -f http://localhost:8080/actuator/health || exit 1" \
            --health-interval=60s \
            --health-timeout=30s \
            --health-retries=3 \
            --health-start-period=120s \
            -v "${SECRETS_DIR}":/run/secrets:ro \
            -e SPRING_PROFILES_ACTIVE=prod,azure \
            -e ENVIRONMENT=production \
            -e SERVER_PORT=8080 \
            -e SPRING_CONFIG_IMPORT=optional:configtree:/run/secrets/ \
            -e TZ=America/Sao_Paulo \
            -e SPRING_DATASOURCE_URL="${SPRING_DATASOURCE_URL}" \
            -e SPRING_DATASOURCE_USERNAME="${SPRING_DATASOURCE_USERNAME}" \
            -e SPRING_DATASOURCE_PASSWORD="${SPRING_DATASOURCE_PASSWORD}" \
            -e JWT_SECRET="${CONEXAO_JWT_SECRET}" \
            -e JWT_PRIVATE_PATH="/run/secrets/jwt_private.pem" \
            -e JWT_PUBLIC_PATH="/run/secrets/jwt_public.pem" \
            -e ENC_MASTER_KEY_PATH="/run/secrets/encryption_master_key" \
            -e ENC_MASTER_PASSWORD_PATH="/run/secrets/encryption_master_password" \
            --label "traefik.enable=true" \
            --label "traefik.docker.network=conexao-network" \
            --label "traefik.http.routers.resultados.rule=Host(\`resultados.conexaodesorte.com.br\`)" \
            --label "traefik.http.routers.resultados.entrypoints=websecure" \
            --label "traefik.http.routers.resultados.tls.certresolver=letsencrypt" \
            --label "traefik.http.services.resultados.loadbalancer.server.port=8080" \
            "$IMAGE"

          for i in $(seq 1 10); do
            if curl -fsS https://resultados.conexaodesorte.com.br/actuator/health >/dev/null 2>&1; then
              echo "✅ Service healthy"
              break
            fi
            echo "⏳ waiting for health ($i/10)"
            sleep 10
            if [ "$i" -eq 10 ]; then
              echo "❌ Health check failed, rolling back..."
              docker stop resultados-microservice || true
              docker rm resultados-microservice || true
              docker run -d --name resultados-microservice --network conexao-network --restart unless-stopped -p 8080:8080 resultados-microservice:backup-$(date +%Y%m%d) || true
              rm -rf "${SECRETS_DIR}" || true
              exit 1
            fi
          done

          rm -rf "${SECRETS_DIR}" || true
          docker image prune -f

  # ===== NOTIFICATION =====
  notify:
    runs-on: ubuntu-latest
    name: 📢 Notification
    if: always()
    needs: [build-and-test, build-image, sign-image, deploy-staging, deploy-production]
    steps:
      - name: 📢 Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always() && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          channel: '#ci-cd-notifications'
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "username": "GitHub Actions",
              "icon_emoji": ":dart:",
              "attachments": [{
                "color": "${{ job.status }}" == "success" ? "good" : "${{ job.status }}" == "failure" ? "danger" : "warning",
                "fields": [{
                  "title": "🎯 Resultados Microservice",
                  "value": "Status: ${{ job.status }}\nBranch: ${{ github.ref_name }}\nCommit: ${{ github.sha }}",
                  "short": true
                }]
              }]
            }