name: 🎯 Resultados Microservice - CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths: ['src/**', 'pom.xml', 'Dockerfile', '.github/workflows/**']
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Destino do deploy'
        required: false
        default: 'production'
        type: choice
        options: [production]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SERVICE_NAME: resultados
  TZ: America/Sao_Paulo

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
  cancel-in-progress: false

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    name: 🏗️ Build and Test
    steps:
      - uses: actions/checkout@v4
      - name: Setup Java 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'
          cache: maven
      - name: Verify Maven wrapper
        run: |
          chmod +x ./mvnw
          ./mvnw --version
      - name: Run unit tests
        run: ./mvnw clean test -Dspring.profiles.active=test
      - name: Build application
        run: ./mvnw clean package -DskipTests -Dspring.profiles.active=production
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: resultados-microservice-jar
          path: target/*.jar
          retention-days: 7

  build-image:
    runs-on: ubuntu-latest
    name: 🐳 Build Docker Image
    needs: build-and-test
    permissions:
      id-token: write
      contents: read
      packages: write
      attestations: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-name-lower: ${{ steps.image_name.outputs.image_name_lower }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4

      - name: Compute lowercase image name
        id: image_name
        run: |
          set -euo pipefail
          REPO='${{ env.IMAGE_NAME }}'
          echo "image_name_lower=$(echo "$REPO" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Diagnose network connectivity
        run: |
          echo "🔍 Diagnosing network connectivity..."
          curl -I --max-time 10 https://registry-1.docker.io/v2/ || echo "Direct connection failed"
          curl -I --max-time 10 https://mirror.gcr.io/v2/ || echo "Mirror connection failed"
          ping -c 3 registry-1.docker.io || echo "Ping failed"
          echo "Network diagnosis completed"

      - name: Set up Docker Buildx (with retry)
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker
          install: true
        timeout-minutes: 5
        continue-on-error: true
        id: buildx_initial
        
      - name: Set up Docker Buildx (fallback)
        if: steps.buildx_initial.outcome == 'failure'  
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true
        timeout-minutes: 10

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.image_name.outputs.image_name_lower }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-,format=short
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{branch}}-{{date 'YYYYMMDD-HHmmss'}}
            type=raw,value=prod-latest,enable=${{ github.ref == 'refs/heads/main' }}
          labels: |
            org.opencontainers.image.title=Resultados Microservice
            org.opencontainers.image.description=Lottery results management microservice
            org.opencontainers.image.service=${{ env.SERVICE_NAME }}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          sbom: true
          provenance: mode=max
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SERVICE_NAME=${{ env.SERVICE_NAME }}
            BUILD_DATE=${{ github.event.head_commit.timestamp || github.run_id }}
            VCS_REF=${{ github.sha }}
            VERSION=1.0.0

  sign-image:
    runs-on: ubuntu-latest
    name: ✍️ Sign & Verify (100% OIDC keyless)
    needs: build-image
    permissions:
      id-token: write
      contents: read
      packages: write
      attestations: write
    steps:
      - name: Verify OIDC token availability
        run: |
          echo "🔍 Verifying OIDC token is available..."
          if [ -z "${ACTIONS_ID_TOKEN_REQUEST_TOKEN:-}" ]; then
            echo "❌ OIDC token not available"
            exit 1
          fi
          echo "✅ OIDC token is available"
          
      - name: Resolve image digest ref
        id: ref
        run: |
          set -euo pipefail
          IMG="ghcr.io/${{ needs.build-image.outputs.image-name-lower }}@${{ needs.build-image.outputs.image-digest }}"
          echo "lower=$(echo "$IMG" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Install cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: v2.5.3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull digest
        run: docker pull "${{ steps.ref.outputs.lower }}"

      - name: Sign (keyless OIDC)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          echo "🔐 Signing container image with OIDC keyless signature..."
          cosign sign --yes "${{ steps.ref.outputs.lower }}"

      - name: Verify OIDC signature
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          echo "✅ Verifying OIDC keyless signature..."
          cosign verify \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            --certificate-identity-regexp "^https://github.com/${{ github.repository }}/\.github/workflows/.*@refs/heads/main$" \
            "${{ steps.ref.outputs.lower }}"
          echo "🎉 Container image signature verified successfully!"
          
      - name: Generate SBOM attestation (OIDC)
        env:
          COSIGN_EXPERIMENTAL: "1"  
        run: |
          echo "📋 Generating SBOM attestation with OIDC..."
          cosign attest --yes --type=spdxjson \
            --predicate=/dev/null \
            "${{ steps.ref.outputs.lower }}" || echo "SBOM attestation optional - continuing"


  deploy-production:
    needs: [build-image, sign-image]
    runs-on: [self-hosted, hostinger-runner]
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    name: 🌟 Deploy to Production (self-hosted, OIDC)
    permissions:
      id-token: write
      contents: read
      packages: read
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Resolver Key Vault + carregar segredos
        run: |
          set -euo pipefail
          VAULT="${{ secrets.AZURE_KEYVAULT_NAME }}"
          if [ -z "$VAULT" ]; then
            VAULT="$(echo "${{ secrets.AZURE_KEYVAULT_ENDPOINT }}" | sed 's#https://##; s#\.vault\.azure\.net/?##')"
          fi
          echo "VAULT=$VAULT" >> "$GITHUB_ENV"

          get() { az keyvault secret show --vault-name "$VAULT" --name "$1" --query value -o tsv; }

          echo "SPRING_DATASOURCE_URL=$(get conexao-de-sorte-database-url)" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_USERNAME=$(get conexao-de-sorte-database-username)" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_PASSWORD=$(get conexao-de-sorte-database-password)" >> $GITHUB_ENV
          echo "CONEXAO_JWT_SECRET=$(get conexao-de-sorte-jwt-secret)" >> $GITHUB_ENV
          echo "CONEXAO_JWT_KEY_ID=$(get conexao-de-sorte-jwt-key-id)" >> $GITHUB_ENV

          SECRETS_DIR=$(mktemp -d -p /tmp conexao_secrets_XXXX)
          umask 077
          printf '%s' "$(get conexao-de-sorte-jwt-privateKey)" > "$SECRETS_DIR/jwt_private.pem"
          printf '%s' "$(get conexao-de-sorte-jwt-publicKey)"  > "$SECRETS_DIR/jwt_public.pem"
          printf '%s' "$(get conexao-de-sorte-encryption-master-key)" > "$SECRETS_DIR/encryption_master_key"
          printf '%s' "$(get conexao-de-sorte-encryption-master-password)" > "$SECRETS_DIR/encryption_master_password"
          chmod 600 "$SECRETS_DIR"/*
          echo "SECRETS_DIR=$SECRETS_DIR" >> $GITHUB_ENV

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Garantir rede Docker
        run: docker network inspect conexao-network >/dev/null 2>&1 || docker network create conexao-network

      - name: Pull & Run (production)
        run: |
          set -euo pipefail
          IMAGE="ghcr.io/${{ needs.build-image.outputs.image-name-lower }}@${{ needs.build-image.outputs.image-digest }}"

          docker tag resultados-microservice resultados-microservice:backup-$(date +%Y%m%d-%H%M%S) || true
          docker pull "$IMAGE" || true
          docker stop resultados-microservice || true
          docker rm resultados-microservice || true

          docker run -d \
            --name resultados-microservice \
            --network conexao-network \
            --restart unless-stopped \
            -p 8080:8080 \
            --health-cmd="curl -f http://localhost:8080/actuator/health || exit 1" \
            --health-interval=60s --health-timeout=30s --health-retries=3 --health-start-period=120s \
            -v "${SECRETS_DIR}":/run/secrets:ro \
            -e SPRING_PROFILES_ACTIVE=prod,azure \
            -e ENVIRONMENT=production \
            -e SERVER_PORT=8080 \
            -e SPRING_CONFIG_IMPORT=optional:configtree:/run/secrets/ \
            -e TZ=${{ env.TZ }} \
            -e SPRING_DATASOURCE_URL="${SPRING_DATASOURCE_URL}" \
            -e SPRING_DATASOURCE_USERNAME="${SPRING_DATASOURCE_USERNAME}" \
            -e SPRING_DATASOURCE_PASSWORD="${SPRING_DATASOURCE_PASSWORD}" \
            -e JWT_SECRET="${CONEXAO_JWT_SECRET}" \
            -e JWT_PRIVATE_PATH="/run/secrets/jwt_private.pem" \
            -e JWT_PUBLIC_PATH="/run/secrets/jwt_public.pem" \
            -e ENC_MASTER_KEY_PATH="/run/secrets/encryption_master_key" \
            -e ENC_MASTER_PASSWORD_PATH="/run/secrets/encryption_master_password" \
            --label "traefik.enable=true" \
            --label "traefik.docker.network=conexao-network" \
            --label "traefik.http.routers.resultados.rule=Host(`resultados.conexaodesorte.com.br`)" \
            --label "traefik.http.routers.resultados.entrypoints=websecure" \
            --label "traefik.http.routers.resultados.tls.certresolver=letsencrypt" \
            --label "traefik.http.services.resultados.loadbalancer.server.port=8080" \
            "$IMAGE"

          for i in $(seq 1 10); do
            if curl -fsS https://resultados.conexaodesorte.com.br/actuator/health >/dev/null; then
              echo "✅ healthy"; break
            fi
            echo "⏳ aguardando ($i/10)"; sleep 10
            if [ "$i" -eq 10 ]; then
              echo "❌ health check falhou, rollback"
              docker stop resultados-microservice || true
              docker rm resultados-microservice || true
              docker run -d --name resultados-microservice --network conexao-network --restart unless-stopped -p 8080:8080 resultados-microservice:backup-$(date +%Y%m%d) || true
              rm -rf "${SECRETS_DIR}" || true
              exit 1
            fi
          done

          rm -rf "${SECRETS_DIR}" || true
          docker image prune -f

  notify:
    runs-on: ubuntu-latest
    name: 📢 Notification
    if: always()
    needs: [build-and-test, build-image, sign-image, deploy-production]
    steps:
      - uses: 8398a7/action-slack@v3
        if: always() && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          channel: '#ci-cd-notifications'
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "username": "GitHub Actions",
              "icon_emoji": ":dart:",
              "attachments": [{
                "color": "${{ job.status }}" == "success" ? "good" : "${{ job.status }}" == "failure" ? "danger" : "warning",
                "fields": [{
                  "title": "🎯 Resultados Microservice",
                  "value": "Status: ${{ job.status }}\nBranch: ${{ github.ref_name }}\nCommit: ${{ github.sha }}",
                  "short": true
                }]
              }]
            }
